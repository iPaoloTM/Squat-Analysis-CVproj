import numpy as np
from scipy.spatial import procrustes
from scipy.linalg import orthogonal_procrustes
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import sys
import json

def main():

    reference_keypositions=[[502, 1527], [766, 3316], [772, 3381], [778, 3430], [784, 3471], [789, 3507], [794, 3542], [800, 3576], [804, 3616], [812, 3660], [826, 3872], [854, 3956], [860, 3994], [864, 4030], [868, 4065], [872, 4101], [877, 4143], [883, 4192], [889, 4245], [897, 4304], [920, 4536], [1107, 5872], [1115, 5975], [1129, 6090], [1141, 6161], [1151, 6214], [1160, 6261], [1167, 6305], [1175, 6353], [1183, 6420], [1201, 6716], [1237, 6804], [1242, 6843], [1246, 6878], [1249, 6909], [1253, 6946], [1259, 6987], [1264, 7037], [1271, 7088], [1280, 7152], [1305, 7614], [1494, 8773], [1503, 8847], [1510, 8906], [1517, 8951], [1523, 8994], [1529, 9033], [1537, 9077], [1547, 9127], [1558, 9192], [1587, 9430], [1603, 9547], [1608, 9594], [1613, 9633], [1618, 9677], [1623, 9724], [1629, 9774], [1634, 9830], [1642, 9889], [1650, 9977], [1678, 10977]]

    sample_keypositions=[[527, 0], [847, 4250], [872, 4424], [901, 4645], [971, 5174], [992, 5325], [1034, 5914], [1208, 6919], [1226, 7031], [1250, 7350], [1293, 7531], [1302, 7610], [1313, 7931], [1492, 9207], [1549, 9549], [1604, 9983], [1653, 10208], [1665, 10337], [1696, 11142]]

    ZED_total=np.array([
    0.05315317763239643,
    0.015693303149452626,
    0.017800307780062974,
    0.018547425154856186,
    0.016969313009857993,
    0.02094398908809981,
    0.023873218920662354,
    0.02656031309272724,
    0.028656241273245783,
    0.02575047372518109,
    0.045532318744174044,
    0.05299663337201216,
    0.055233070600906216,
    0.048260813038246246,
    0.0367216489710966,
    0.03303517323337828,
    0.03344779512114965,
    0.027911560781197622,
    0.020758540755712127,
    0.015059482821286033,
    0.009933511204974887,
    0.012309204581824919,
    0.017797564135577298,
    0.020024245870126724,
    0.017629258370555605,
    0.01781208873067424,
    0.01908935120565654,
    0.02044938267888415,
    0.022492351827357038,
    0.031451160922802604,
    0.0385150366789859,
    0.0338823853987274,
    0.03262556373452184,
    0.02898835001680471,
    0.025635010991173286,
    0.021679140024925846,
    0.01795929555856865,
    0.014425476968025186,
    0.012901108582434288,
    0.013683700008811132,
    0.017688414993921292,
    0.015756756176653033,
    0.012826174794276793,
    0.012133853130128169,
    0.013176932149626444,
    0.014076949725797414,
    0.016997377510144886,
    0.02765697331844918,
    0.03462275460287822,
    0.043331334906242136,
    0.03697979936180227,
    0.040786476658291805,
    0.035261987666260416,
    0.03260326835533758,
    0.030214718920846255,
    0.02918296987636373,
    0.028271996331340452,
    0.0274705587846208,
    0.022515051268398634,
    0.019967142466353317,
    0.024286920405079515,
    ])

    MOCAP_total=np.array([
    0.005036975214007984,
    0.013032092520156122,
    0.018271653614571774,
    0.019675309113205284,
    0.020308122395205346,
    0.024930541877535992,
    0.02717893097542176,
    0.028215489001493003,
    0.027851980455582508,
    0.026908166182885447,
    0.024526475722053877,
    0.020456821830324424,
    0.02036498098652911,
    0.02126099923904303,
    0.02178188755121921,
    0.020246027239851666,
    0.01758344306374501,
    0.016311701592136223,
    0.017446169584945444,
    0.0154444731445916,
    0.009421447658987966,
    0.012757429647958788,
    0.015795346735087062,
    0.02071844509801843,
    0.02624722076781716,
    0.030278122708701713,
    0.03567946059576053,
    0.039880751781937084,
    0.044911273289058314,
    0.04979161757010859,
    0.04979161757010859,
    0.05755210136204917,
    0.05087784474525679,
    0.044196147790168144,
    0.03757796434050805,
    0.032979386457430225,
    0.028132171050780082,
    0.02450376538545973,
    0.019703434798731073,
    0.01586746707304602,
    0.01318411809837001,
    0.007888049206864898,
    0.011517740668533186,
    0.01187866176459473,
    0.014003236215818277,
    0.016896303756121268,
    0.021256191535407497,
    0.0225107472517377,
    0.022425755043162163,
    0.02380042152271204,
    0.03745456584864545,
    0.026880941076142122,
    0.023972825207538066,
    0.020319042807187878,
    0.01899267791220134,
    0.01810270277485801,
    0.015838629225484006,
    0.013212225486148223,
    0.013167518868540274,
    0.01573938411096227,
    0.05042553091214627,
    ])

    ZED_lower=np.array([
    0.007778223723627992,
    0.027520977352192846,
    0.032554323208012055,
    0.03666102044170009,
    0.02606847139706293,
    0.03222773647290184,
    0.03260523154589842,
    0.02333250342723562,
    0.03099792950492366,
    0.026785631418199216,
    0.04230557528976832,
    0.09818977282515212,
    0.10249651882878363,
    0.08515918315164105,
    0.06474925929643797,
    0.052677814796747706,
    0.04339076391359686,
    0.030926520629135246,
    0.02429218555535497,
    0.02509929003080091,
    0.01733375134235179,
    0.023096506023338417,
    0.036590774608623006,
    0.052569961208682736,
    0.04915980936599706,
    0.04862692941024249,
    0.05904280479381983,
    0.06877986700635558,
    0.08046762695472809,
    0.09331281063326792,
    0.10681658021706818,
    0.11595503502184425,
    0.11030497470085293,
    0.09951157702950969,
    0.08899124993462873,
    0.07383575278577631,
    0.05324901421412708,
    0.03696346327266267,
    0.028418652399152602,
    0.01686930258045801,
    0.026295332666483155,
    0.03255499972013734,
    0.04332642765736629,
    0.030699570209211487,
    0.034533112834955616,
    0.04048306136001351,
    0.04488942832143699,
    0.06376386044940129,
    0.08836912822408495,
    0.09302701048947522,
    0.09569388032134206,
    0.08974335273831771,
    0.08382051200278559,
    0.07517603478880791,
    0.0625817391357498,
    0.052662772897168385,
    0.04602827057503181,
    0.043129323010518826,
    0.03915375330176981,
    0.04387132466865556,
    0.02836854459313988,
    ])

    MOCAP_lower=np.array([
    0.012911918615605112,
    0.01636500356671648,
    0.022023047979335044,
    0.024613814991538634,
    0.0284912260340009,
    0.03046681019573772,
    0.03568394698818324,
    0.03882493731499495,
    0.04122578713362515,
    0.045916639797031485,
    0.05318374230730553,
    0.04418897456594185,
    0.04038086779116944,
    0.036618949608745024,
    0.032619657042249645,
    0.02904154382068274,
    0.0277208007366823,
    0.02562914812570168,
    0.022067811016067324,
    0.01961306641464129,
    0.014326069725565237,
    0.0224861973064725,
    0.030697703886559544,
    0.03954360650320846,
    0.04846856026738166,
    0.05705071732331706,
    0.06812118118692843,
    0.07755259836113614,
    0.08693979299503514,
    0.09713890329428067,
    0.10799744442774105,
    0.09792778076907771,
    0.08743239677621198,
    0.07768105221926266,
    0.06782949352500614,
    0.05875046958586332,
    0.05213651823883909,
    0.043459332322419185,
    0.043459332322419185,
    0.03555443716457285,
    0.02687501317636186,
    0.015533905289661766,
    0.023127358916945038,
    0.029067242059447867,
    0.03395310802664114,
    0.041212453476584844,
    0.047345235960127935,
    0.05372952351448615,
    0.06099209424753963,
    0.06487048795886147,
    0.07229517092599329,
    0.06594157753736589,
    0.05651616943423185,
    0.04955582604879197,
    0.04489639558398059,
    0.04198351227829915,
    0.03630926321432225,
    0.03036077115182736,
    0.025180822522386227,
    0.019052230910821057,
    0.047973758263513945,
    ])

    fig = plt.figure(figsize=(12, 6))
    time = np.arange(len(reference_keypositions))

    # ax1 = fig.add_subplot(121)
    # ax1.plot(time, ZED_total, color='orange')
    # ax1.plot(time, MOCAP_total, color='green')
    # ax1.set_xlabel('Time')
    # ax1.set_ylabel('MPJPE')
    # plt.title("MPJPE Total body")
    #
    # ax2 = fig.add_subplot(122)
    # ax2.plot(time, ZED_lower, color='orange')
    # ax2.plot(time, MOCAP_lower, color='green')
    # ax2.set_xlabel('T-pose')
    # ax2.set_ylabel('MPJPE')
    # plt.title("MPJPE Lower body")

    ax3 = fig.add_subplot(111)
    ax3.plot(time, abs(ZED_total-MOCAP_total))
    ax3.set_xlabel('Timestamps')
    ax3.set_ylabel('MPJPE_ZED - MPJPE_MOCAP')
    plt.title("MPJPE Difference")

    # ax3 = fig.add_subplot(111)
    # ax3.plot(time, ZED_lower-MOCAP_lower, color='red')
    # ax3.set_xlabel('Time')
    # ax3.set_ylabel('MPJPE_ZED - MPJPE_MOCAP')

    plt.show()

if __name__ == '__main__':
    main()
